"""
¬øQu√© es un m√≥dulo?
Un m√≥dulo es simplemente otro archivo de Python que tiene funciones, variables o clases que pod√©s usar en tu c√≥digo.

Por ejemplo:
Python ya trae muchos m√≥dulos listos para usar como:

math: funciones matem√°ticas

random: n√∫meros aleatorios

datetime: fechas y horas

¬øC√≥mo se usa un m√≥dulo?
Opci√≥n 1: importar todo el m√≥dulo
import math

print(math.sqrt(25))  # ra√≠z cuadrada ‚Üí 5.0
Us√°s el nombre del m√≥dulo (math) y luego la funci√≥n (sqrt()).

Opci√≥n 2: importar solo lo que necesit√°s

from math import sqrt

print(sqrt(25))  # tambi√©n imprime 5.0
As√≠ no necesit√°s poner el nombre del m√≥dulo antes.

Ejemplo con m√≥dulo random
import random

print(random.randint(1, 10))  # N√∫mero aleatorio entre 1 y 10
üìÖ Ejemplo con m√≥dulo datetime

import datetime

print(datetime.datetime.now())  # Muestra la fecha y hora actual
üß† ¬øPara qu√© sirven los m√≥dulos?
Para no tener que escribir todo desde cero

Para ordenar tu propio c√≥digo (vos pod√©s crear tus propios m√≥dulos)

Para usar funciones ya listas (como sqrt, randint, now, etc.)

üìå Resumen r√°pido
Acci√≥n	C√≥digo ejemplo
Importar todo un m√≥dulo	import math
Usar una funci√≥n del m√≥dulo	math.sqrt(16)
Importar solo una funci√≥n	from math import sqrt
Usar sin el nombre del m√≥dulo	sqrt(16)
"""

"""
¬øQu√© es un m√≥dulo personalizado?
Es simplemente un archivo .py donde escrib√≠s funciones, clases o variables para usar despu√©s en otros programas. As√≠ pod√©s organizar mejor tu c√≥digo y reutilizarlo.

üõ†Ô∏è C√≥mo crear y usar tu propio m√≥dulo
Cre√°s un archivo nuevo con el nombre que quieras, por ejemplo mi_modulo.py.

Escrib√≠s funciones o lo que necesites dentro, por ejemplo:

# mi_modulo.py
def saludar(nombre):
    print(f"Hola, {nombre}!")

def calcular_suma(a, b):
    return a + b
En otro archivo Python (en la misma carpeta), import√°s ese m√≥dulo y us√°s sus funciones:

import mi_modulo

mi_modulo.saludar("Juan")  # Imprime: Hola, Juan!
resultado = mi_modulo.calcular_suma(5, 3)
print(resultado)  # Imprime: 8
üß© Organizaci√≥n con varios m√≥dulos
Cuando el programa crece, es mejor dividir el c√≥digo en varios m√≥dulos seg√∫n su funci√≥n.

Por ejemplo:

operaciones.py para funciones matem√°ticas
def sumar(a, b):
    return a + b

def restar(a, b):
    return a - b
utilidades.py para funciones generales
def imprimir_mensaje(mensaje):
    print(mensaje)

def obtener_nombre_usuario():
    return input("Ingresa tu nombre: ")
üíª Usar esos m√≥dulos en tu programa principal
python
Copiar
Editar
import operaciones
import utilidades

resultado = operaciones.sumar(5, 3)
utilidades.imprimir_mensaje(f"El resultado de la suma es: {resultado}")

nombre = utilidades.obtener_nombre_usuario()
utilidades.imprimir_mensaje(f"Hola, {nombre}!")
üìå Beneficios
C√≥digo m√°s ordenado y f√°cil de mantener

Funciones agrupadas seg√∫n su funci√≥n

Pod√©s reutilizar m√≥dulos en otros proyectos
"""

"""
 ¬øQu√© es un paquete?
Un paquete es una carpeta (directorio) que agrupa varios m√≥dulos relacionados en una estructura ordenada. As√≠ pod√©s organizar mejor muchos m√≥dulos y evitar confusiones con nombres repetidos.

üõ†Ô∏è C√≥mo crear un paquete
Crear una carpeta con el nombre que quieras, por ejemplo: mi_paquete

Dentro de esa carpeta, crear un archivo especial llamado __init__.py

Este archivo puede estar vac√≠o (solo para que Python reconozca que esa carpeta es un paquete)

O puede contener c√≥digo para inicializar el paquete.

Agregar tus m√≥dulos (.py) dentro de esa carpeta

Ejemplo de estructura:

markdown
Copiar
Editar
mi_paquete/
   __init__.py
   modulo1.py
   modulo2.py
üì• C√≥mo importar y usar m√≥dulos dentro de un paquete
En tu programa principal, pod√©s importar as√≠:

from mi_paquete import modulo1, modulo2

modulo1.funcion1()
modulo2.funcion2()
Si modulo1.py tiene una funci√≥n funcion1() y modulo2.py tiene funcion2(), las pod√©s usar llam√°ndolas con el nombre del m√≥dulo.

üìå Resumen
Un paquete es una carpeta con m√≥dulos de Python adentro.

El archivo __init__.py hace que Python reconozca esa carpeta como un paquete.

Los paquetes te ayudan a organizar mejor tu c√≥digo cuando ten√©s muchos m√≥dulos.

Import√°s m√≥dulos desde paquetes usando from paquete import modulo.
"""
