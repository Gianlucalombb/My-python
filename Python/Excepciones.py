"""
¬øQu√© es una excepci√≥n?
Una excepci√≥n es un error que ocurre mientras tu c√≥digo se est√° ejecutando.
En vez de que el programa se rompa, pod√©s atrapar el error y hacer algo al respecto.

try - except
try:
Le dice a Python: "Intent√° hacer esto... puede fallar".

except:
Y si falla, Python se salta al except y hace lo que vos le digas.

Ejemplo:

try:
    resultado = 10 / 0
    print(resultado)
except ZeroDivisionError:
    print("Error: No se puede dividir por cero")
Ac√°, como 10 √∑ 0 da error, no se rompe el programa, sino que se imprime un mensaje de error.

üéØ ¬øY si puede fallar por varios motivos?
Pod√©s tener varios except:

try:
    numero = int("hola")
except ZeroDivisionError:
    print("Error: divisi√≥n por cero")
except ValueError:
    print("Error: no se pudo convertir texto a n√∫mero")

finally (opcional)
Este bloque siempre se ejecuta, pase lo que pase.
Se usa por ejemplo para cerrar archivos o liberar recursos:

try:
    archivo = open("archivo.txt", "r")
    # Leer el archivo...
except FileNotFoundError:
    print("Error: El archivo no existe")
finally:
    archivo.close()  # Esto se ejecuta s√≠ o s√≠

‚úÖ En resumen:
try: Intenta ejecutar algo que puede fallar.
except:	Maneja el error si ocurre. Pod√©s tener uno o varios.
finally: Se ejecuta siempre (haya o no error), ideal para cerrar archivos o limpiar.
"""

"""
¬øQu√© es una excepci√≥n personalizada?
Es una excepci√≥n creada por vos mismo, para controlar errores especiales que solo tienen sentido dentro de tu programa.
Por ejemplo, si hac√©s un programa de banco y quer√©s tirar un error cuando el saldo es insuficiente, pod√©s crear una excepci√≥n llamada SaldoInsuficienteError.

üõ† ¬øC√≥mo se hace?
Hay dos formas:

1. Con una excepci√≥n com√∫n (Exception)
def funcion():
    condicion = True
    if condicion:
        raise Exception("Pas√≥ algo raro")

try:
    funcion()
except Exception as e:
    print(f"Error: {e}")
üîé raise ‚Üí sirve para lanzar un error
üîé Exception("mensaje") ‚Üí el mensaje que quer√©s mostrar
üîé as e ‚Üí guarda el error en la variable e para mostrarlo despu√©s

üî∏ 2. Con una clase propia (la mejor forma)
class MiError(Exception):
    pass

def funcion():
    raise MiError("Este es mi error personalizado")

try:
    funcion()
except MiError as e:
    print(f"Ocurri√≥ un error: {e}")
Ac√° est√°s creando una nueva clase de error (una nueva "excepci√≥n") que pod√©s usar solo cuando la necesites.

‚úÖ ¬øPara qu√© sirve?
Te ayuda a:

Dar mensajes de error claros.

Detectar errores espec√≠ficos de tu programa.

Que tu programa sea m√°s ordenado, controlado y profesional.

üîí Record√°:
raise = lanzar un error.

try = intento ejecutar algo.

except = si falla, manejo el error.

finally = se ejecuta siempre (ideal para cerrar archivos, etc.).

Pod√©s hacer tu propio tipo de error con class TuError(Exception):.
"""
"""
Ejercicio 1 ‚Äî Divisi√≥n segura
Ped√≠ dos n√∫meros al usuario (dividendo y divisor) e imprim√≠ el resultado de la divisi√≥n.
Si el usuario intenta dividir por 0, mostr√° el mensaje: "Error: No se puede dividir por cero."
try:
    a = int(input("Ingres√° el dividendo: "))
    b = int(input("Ingres√° el divisor: "))
    resultado = a / b
    print(f"Resultado: {resultado}")
except ZeroDivisionError:
    print("Error: No se puede dividir por cero.")
"""

"""
Ejercicio 2 ‚Äî Validar edad
Ped√≠ al usuario su edad. Si escribe algo que no sea un n√∫mero (por ejemplo, "hola"), mostr√° un mensaje: "Error: Ingres√° un n√∫mero v√°lido."
try:
    edad = int(input("Ingres√° tu edad: "))
    print(f"Ten√©s {edad} a√±os.")
except ValueError:
    print("Error: Ingres√° un n√∫mero v√°lido.")
"""

"""
Ejercicio 3 ‚Äî Usar finally
Abr√≠ un archivo de texto llamado "notas.txt" en modo lectura.
Si el archivo no existe, mostr√° un mensaje de error.
Us√° finally para mostrar "Programa finalizado" siempre, pase lo que pase.
try:
    archivo = open("notas.txt", "r")
    contenido = archivo.read()
    print(contenido)
except FileNotFoundError:
    print("Error: El archivo no fue encontrado.")
finally:
    print("Programa finalizado.")
"""