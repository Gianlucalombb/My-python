"""
Â¿QuÃ© es una excepciÃ³n?
Una excepciÃ³n es un error que ocurre mientras tu cÃ³digo se estÃ¡ ejecutando.
En vez de que el programa se rompa, podÃ©s atrapar el error y hacer algo al respecto.

try - except
try:
Le dice a Python: "IntentÃ¡ hacer esto... puede fallar".

except:
Y si falla, Python se salta al except y hace lo que vos le digas.

Ejemplo:

try:
    resultado = 10 / 0
    print(resultado)
except ZeroDivisionError:
    print("Error: No se puede dividir por cero")
AcÃ¡, como 10 Ã· 0 da error, no se rompe el programa, sino que se imprime un mensaje de error.

ðŸŽ¯ Â¿Y si puede fallar por varios motivos?
PodÃ©s tener varios except:

try:
    numero = int("hola")
except ZeroDivisionError:
    print("Error: divisiÃ³n por cero")
except ValueError:
    print("Error: no se pudo convertir texto a nÃºmero")

finally (opcional)
Este bloque siempre se ejecuta, pase lo que pase.
Se usa por ejemplo para cerrar archivos o liberar recursos:

try:
    archivo = open("archivo.txt", "r")
    # Leer el archivo...
except FileNotFoundError:
    print("Error: El archivo no existe")
finally:
    archivo.close()  # Esto se ejecuta sÃ­ o sÃ­

âœ… En resumen:
try: Intenta ejecutar algo que puede fallar.
except:	Maneja el error si ocurre. PodÃ©s tener uno o varios.
finally: Se ejecuta siempre (haya o no error), ideal para cerrar archivos o limpiar.
"""

"""
Â¿QuÃ© es una excepciÃ³n personalizada?
Es una excepciÃ³n creada por vos mismo, para controlar errores especiales que solo tienen sentido dentro de tu programa.
Por ejemplo, si hacÃ©s un programa de banco y querÃ©s tirar un error cuando el saldo es insuficiente, podÃ©s crear una excepciÃ³n llamada SaldoInsuficienteError.

ðŸ›  Â¿CÃ³mo se hace?
Hay dos formas:

1. Con una excepciÃ³n comÃºn (Exception)
def funcion():
    condicion = True
    if condicion:
        raise Exception("PasÃ³ algo raro")

try:
    funcion()
except Exception as e:
    print(f"Error: {e}")
ðŸ”Ž raise â†’ sirve para lanzar un error
ðŸ”Ž Exception("mensaje") â†’ el mensaje que querÃ©s mostrar
ðŸ”Ž as e â†’ guarda el error en la variable e para mostrarlo despuÃ©s

ðŸ”¸ 2. Con una clase propia (la mejor forma)
class MiError(Exception):
    pass

def funcion():
    raise MiError("Este es mi error personalizado")

try:
    funcion()
except MiError as e:
    print(f"OcurriÃ³ un error: {e}")
AcÃ¡ estÃ¡s creando una nueva clase de error (una nueva "excepciÃ³n") que podÃ©s usar solo cuando la necesites.

âœ… Â¿Para quÃ© sirve?
Te ayuda a:

Dar mensajes de error claros.

Detectar errores especÃ­ficos de tu programa.

Que tu programa sea mÃ¡s ordenado, controlado y profesional.

ðŸ”’ RecordÃ¡:
raise = lanzar un error.

try = intento ejecutar algo.

except = si falla, manejo el error.

finally = se ejecuta siempre (ideal para cerrar archivos, etc.).

PodÃ©s hacer tu propio tipo de error con class TuError(Exception):.


"""